/*
* generated by Xtext
*/
package dk.itu.smdp.group11.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import dk.itu.smdp.group11.services.SurveyGrammarAccess;

public class SurveyParser extends AbstractContentAssistParser {
	
	@Inject
	private SurveyGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected dk.itu.smdp.group11.ui.contentassist.antlr.internal.InternalSurveyParser createParser() {
		dk.itu.smdp.group11.ui.contentassist.antlr.internal.InternalSurveyParser result = new dk.itu.smdp.group11.ui.contentassist.antlr.internal.InternalSurveyParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getSurveyAccess().getGroup(), "rule__Survey__Group__0");
					put(grammarAccess.getSurveyAccess().getGroup_9(), "rule__Survey__Group_9__0");
					put(grammarAccess.getQuestionAccess().getGroup(), "rule__Question__Group__0");
					put(grammarAccess.getQuestionAccess().getGroup_7(), "rule__Question__Group_7__0");
					put(grammarAccess.getContentAccess().getGroup(), "rule__Content__Group__0");
					put(grammarAccess.getContentAccess().getGroup_3(), "rule__Content__Group_3__0");
					put(grammarAccess.getAnswerAccess().getGroup(), "rule__Answer__Group__0");
					put(grammarAccess.getAnswerAccess().getGroup_2(), "rule__Answer__Group_2__0");
					put(grammarAccess.getAnswerAccess().getGroup_5(), "rule__Answer__Group_5__0");
					put(grammarAccess.getSurveyAccess().getIntroAssignment_3(), "rule__Survey__IntroAssignment_3");
					put(grammarAccess.getSurveyAccess().getOutroAssignment_5(), "rule__Survey__OutroAssignment_5");
					put(grammarAccess.getSurveyAccess().getQuestionsAssignment_8(), "rule__Survey__QuestionsAssignment_8");
					put(grammarAccess.getSurveyAccess().getQuestionsAssignment_9_1(), "rule__Survey__QuestionsAssignment_9_1");
					put(grammarAccess.getQuestionAccess().getIsExclusiveAssignment_0(), "rule__Question__IsExclusiveAssignment_0");
					put(grammarAccess.getQuestionAccess().getIsOptionalAssignment_1(), "rule__Question__IsOptionalAssignment_1");
					put(grammarAccess.getQuestionAccess().getAnswersAssignment_6(), "rule__Question__AnswersAssignment_6");
					put(grammarAccess.getQuestionAccess().getAnswersAssignment_7_1(), "rule__Question__AnswersAssignment_7_1");
					put(grammarAccess.getQuestionAccess().getContentAssignment_10(), "rule__Question__ContentAssignment_10");
					put(grammarAccess.getContentAccess().getBodyAssignment_3_1(), "rule__Content__BodyAssignment_3_1");
					put(grammarAccess.getAnswerAccess().getIsFreeTextAssignment_2_1(), "rule__Answer__IsFreeTextAssignment_2_1");
					put(grammarAccess.getAnswerAccess().getContentAssignment_4(), "rule__Answer__ContentAssignment_4");
					put(grammarAccess.getAnswerAccess().getFollowupAssignment_5_1(), "rule__Answer__FollowupAssignment_5_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			dk.itu.smdp.group11.ui.contentassist.antlr.internal.InternalSurveyParser typedParser = (dk.itu.smdp.group11.ui.contentassist.antlr.internal.InternalSurveyParser) parser;
			typedParser.entryRuleSurvey();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SurveyGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SurveyGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
