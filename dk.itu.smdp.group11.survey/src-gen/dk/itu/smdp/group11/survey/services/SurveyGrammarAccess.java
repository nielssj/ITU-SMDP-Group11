/*
* generated by Xtext
*/
package dk.itu.smdp.group11.survey.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SurveyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SurveyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Survey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSurveyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIntroKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIntroAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIntroEStringParserRuleCall_2_1_0 = (RuleCall)cIntroAssignment_2_1.eContents().get(0);
		private final Assignment cQuestionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuestionsQuestionParserRuleCall_3_0 = (RuleCall)cQuestionsAssignment_3.eContents().get(0);
		private final Assignment cQuestionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQuestionsQuestionParserRuleCall_4_0 = (RuleCall)cQuestionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOutroKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOutroAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOutroEStringParserRuleCall_5_1_0 = (RuleCall)cOutroAssignment_5_1.eContents().get(0);
		
		//Survey:
		//	"Survey" name=EString ("Intro" intro=EString)? questions+=Question questions+=Question* ("Outro" outro=EString)?;
		public ParserRule getRule() { return rule; }

		//"Survey" name=EString ("Intro" intro=EString)? questions+=Question questions+=Question* ("Outro" outro=EString)?
		public Group getGroup() { return cGroup; }

		//"Survey"
		public Keyword getSurveyKeyword_0() { return cSurveyKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//("Intro" intro=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//"Intro"
		public Keyword getIntroKeyword_2_0() { return cIntroKeyword_2_0; }

		//intro=EString
		public Assignment getIntroAssignment_2_1() { return cIntroAssignment_2_1; }

		//EString
		public RuleCall getIntroEStringParserRuleCall_2_1_0() { return cIntroEStringParserRuleCall_2_1_0; }

		//questions+=Question
		public Assignment getQuestionsAssignment_3() { return cQuestionsAssignment_3; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_3_0() { return cQuestionsQuestionParserRuleCall_3_0; }

		//questions+=Question*
		public Assignment getQuestionsAssignment_4() { return cQuestionsAssignment_4; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_4_0() { return cQuestionsQuestionParserRuleCall_4_0; }

		//("Outro" outro=EString)?
		public Group getGroup_5() { return cGroup_5; }

		//"Outro"
		public Keyword getOutroKeyword_5_0() { return cOutroKeyword_5_0; }

		//outro=EString
		public Assignment getOutroAssignment_5_1() { return cOutroAssignment_5_1; }

		//EString
		public RuleCall getOutroEStringParserRuleCall_5_1_0() { return cOutroEStringParserRuleCall_5_1_0; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQuestion_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTableQuestionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Question:
		//	Question_Impl | TableQuestion;
		public ParserRule getRule() { return rule; }

		//Question_Impl | TableQuestion
		public Alternatives getAlternatives() { return cAlternatives; }

		//Question_Impl
		public RuleCall getQuestion_ImplParserRuleCall_0() { return cQuestion_ImplParserRuleCall_0; }

		//TableQuestion
		public RuleCall getTableQuestionParserRuleCall_1() { return cTableQuestionParserRuleCall_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class Question_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIsExclusiveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsExclusiveExclusiveKeyword_2_0 = (Keyword)cIsExclusiveAssignment_2.eContents().get(0);
		private final Assignment cIsOptionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsOptionalOptionalKeyword_3_0 = (Keyword)cIsOptionalAssignment_3.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyEStringParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAnswersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnswersAnswerParserRuleCall_6_0 = (RuleCall)cAnswersAssignment_6.eContents().get(0);
		private final Assignment cAnswersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAnswersAnswerParserRuleCall_7_0 = (RuleCall)cAnswersAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Question_Impl returns Question:
		//	"Question" name=EString isExclusive?="exclusive"? isOptional?="optional"? body=EString "(" answers+=Answer
		//	answers+=Answer* ")";
		public ParserRule getRule() { return rule; }

		//"Question" name=EString isExclusive?="exclusive"? isOptional?="optional"? body=EString "(" answers+=Answer
		//answers+=Answer* ")"
		public Group getGroup() { return cGroup; }

		//"Question"
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//isExclusive?="exclusive"?
		public Assignment getIsExclusiveAssignment_2() { return cIsExclusiveAssignment_2; }

		//"exclusive"
		public Keyword getIsExclusiveExclusiveKeyword_2_0() { return cIsExclusiveExclusiveKeyword_2_0; }

		//isOptional?="optional"?
		public Assignment getIsOptionalAssignment_3() { return cIsOptionalAssignment_3; }

		//"optional"
		public Keyword getIsOptionalOptionalKeyword_3_0() { return cIsOptionalOptionalKeyword_3_0; }

		//body=EString
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//EString
		public RuleCall getBodyEStringParserRuleCall_4_0() { return cBodyEStringParserRuleCall_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//answers+=Answer
		public Assignment getAnswersAssignment_6() { return cAnswersAssignment_6; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_6_0() { return cAnswersAnswerParserRuleCall_6_0; }

		//answers+=Answer*
		public Assignment getAnswersAssignment_7() { return cAnswersAssignment_7; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_7_0() { return cAnswersAnswerParserRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class AnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Answer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnswerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsFreeTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsFreeTextFreetextKeyword_1_0 = (Keyword)cIsFreeTextAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyEStringParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFollowupAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFollowupQuestionCrossReference_3_1_0 = (CrossReference)cFollowupAssignment_3_1.eContents().get(0);
		private final RuleCall cFollowupQuestionEStringParserRuleCall_3_1_0_1 = (RuleCall)cFollowupQuestionCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cFollowupAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cFollowupQuestionCrossReference_3_2_1_0 = (CrossReference)cFollowupAssignment_3_2_1.eContents().get(0);
		private final RuleCall cFollowupQuestionEStringParserRuleCall_3_2_1_0_1 = (RuleCall)cFollowupQuestionCrossReference_3_2_1_0.eContents().get(1);
		
		//Answer:
		//	"Answer" isFreeText?="freetext"? body=EString ("->" followup+=[Question|EString] (","
		//	followup+=[Question|EString])*)?;
		public ParserRule getRule() { return rule; }

		//"Answer" isFreeText?="freetext"? body=EString ("->" followup+=[Question|EString] ("," followup+=[Question|EString])*)?
		public Group getGroup() { return cGroup; }

		//"Answer"
		public Keyword getAnswerKeyword_0() { return cAnswerKeyword_0; }

		//isFreeText?="freetext"?
		public Assignment getIsFreeTextAssignment_1() { return cIsFreeTextAssignment_1; }

		//"freetext"
		public Keyword getIsFreeTextFreetextKeyword_1_0() { return cIsFreeTextFreetextKeyword_1_0; }

		//body=EString
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//EString
		public RuleCall getBodyEStringParserRuleCall_2_0() { return cBodyEStringParserRuleCall_2_0; }

		//("->" followup+=[Question|EString] ("," followup+=[Question|EString])*)?
		public Group getGroup_3() { return cGroup_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//followup+=[Question|EString]
		public Assignment getFollowupAssignment_3_1() { return cFollowupAssignment_3_1; }

		//[Question|EString]
		public CrossReference getFollowupQuestionCrossReference_3_1_0() { return cFollowupQuestionCrossReference_3_1_0; }

		//EString
		public RuleCall getFollowupQuestionEStringParserRuleCall_3_1_0_1() { return cFollowupQuestionEStringParserRuleCall_3_1_0_1; }

		//("," followup+=[Question|EString])*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//followup+=[Question|EString]
		public Assignment getFollowupAssignment_3_2_1() { return cFollowupAssignment_3_2_1; }

		//[Question|EString]
		public CrossReference getFollowupQuestionCrossReference_3_2_1_0() { return cFollowupQuestionCrossReference_3_2_1_0; }

		//EString
		public RuleCall getFollowupQuestionEStringParserRuleCall_3_2_1_0_1() { return cFollowupQuestionEStringParserRuleCall_3_2_1_0_1; }
	}

	public class TableQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIsExclusiveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsExclusiveExclusiveKeyword_2_0 = (Keyword)cIsExclusiveAssignment_2.eContents().get(0);
		private final Assignment cIsOptionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsOptionalOptionalKeyword_3_0 = (Keyword)cIsOptionalAssignment_3.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyEStringParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cItemsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cItemsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cItemsItemParserRuleCall_8_0 = (RuleCall)cItemsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cItemsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cItemsItemParserRuleCall_9_1_0 = (RuleCall)cItemsAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cAnswersAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cAnswersAnswerParserRuleCall_11_0 = (RuleCall)cAnswersAssignment_11.eContents().get(0);
		private final Assignment cAnswersAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cAnswersAnswerParserRuleCall_12_0 = (RuleCall)cAnswersAssignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//TableQuestion:
		//	"TableQuestion" name=EString isExclusive?="exclusive"? isOptional?="optional"? body=EString "(" "Items" "("
		//	items+=Item ("," items+=Item)* ")" answers+=Answer answers+=Answer* ")";
		public ParserRule getRule() { return rule; }

		//"TableQuestion" name=EString isExclusive?="exclusive"? isOptional?="optional"? body=EString "(" "Items" "(" items+=Item
		//("," items+=Item)* ")" answers+=Answer answers+=Answer* ")"
		public Group getGroup() { return cGroup; }

		//"TableQuestion"
		public Keyword getTableQuestionKeyword_0() { return cTableQuestionKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//isExclusive?="exclusive"?
		public Assignment getIsExclusiveAssignment_2() { return cIsExclusiveAssignment_2; }

		//"exclusive"
		public Keyword getIsExclusiveExclusiveKeyword_2_0() { return cIsExclusiveExclusiveKeyword_2_0; }

		//isOptional?="optional"?
		public Assignment getIsOptionalAssignment_3() { return cIsOptionalAssignment_3; }

		//"optional"
		public Keyword getIsOptionalOptionalKeyword_3_0() { return cIsOptionalOptionalKeyword_3_0; }

		//body=EString
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//EString
		public RuleCall getBodyEStringParserRuleCall_4_0() { return cBodyEStringParserRuleCall_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//"Items"
		public Keyword getItemsKeyword_6() { return cItemsKeyword_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//items+=Item
		public Assignment getItemsAssignment_8() { return cItemsAssignment_8; }

		//Item
		public RuleCall getItemsItemParserRuleCall_8_0() { return cItemsItemParserRuleCall_8_0; }

		//("," items+=Item)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//items+=Item
		public Assignment getItemsAssignment_9_1() { return cItemsAssignment_9_1; }

		//Item
		public RuleCall getItemsItemParserRuleCall_9_1_0() { return cItemsItemParserRuleCall_9_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//answers+=Answer
		public Assignment getAnswersAssignment_11() { return cAnswersAssignment_11; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_11_0() { return cAnswersAnswerParserRuleCall_11_0; }

		//answers+=Answer*
		public Assignment getAnswersAssignment_12() { return cAnswersAssignment_12; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_12_0() { return cAnswersAnswerParserRuleCall_12_0; }

		//")"
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
	}

	public class ItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Item");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsFreeTextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsFreeTextFreetextKeyword_0_0 = (Keyword)cIsFreeTextAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyEStringParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Item:
		//	isFreeText?="freetext"? body=EString;
		public ParserRule getRule() { return rule; }

		//isFreeText?="freetext"? body=EString
		public Group getGroup() { return cGroup; }

		//isFreeText?="freetext"?
		public Assignment getIsFreeTextAssignment_0() { return cIsFreeTextAssignment_0; }

		//"freetext"
		public Keyword getIsFreeTextFreetextKeyword_0_0() { return cIsFreeTextFreetextKeyword_0_0; }

		//body=EString
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//EString
		public RuleCall getBodyEStringParserRuleCall_1_0() { return cBodyEStringParserRuleCall_1_0; }
	}
	
	
	private SurveyElements pSurvey;
	private QuestionElements pQuestion;
	private EStringElements pEString;
	private Question_ImplElements pQuestion_Impl;
	private AnswerElements pAnswer;
	private TableQuestionElements pTableQuestion;
	private ItemElements pItem;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SurveyGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.itu.smdp.group11.survey.Survey".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Survey:
	//	"Survey" name=EString ("Intro" intro=EString)? questions+=Question questions+=Question* ("Outro" outro=EString)?;
	public SurveyElements getSurveyAccess() {
		return (pSurvey != null) ? pSurvey : (pSurvey = new SurveyElements());
	}
	
	public ParserRule getSurveyRule() {
		return getSurveyAccess().getRule();
	}

	//Question:
	//	Question_Impl | TableQuestion;
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Question_Impl returns Question:
	//	"Question" name=EString isExclusive?="exclusive"? isOptional?="optional"? body=EString "(" answers+=Answer
	//	answers+=Answer* ")";
	public Question_ImplElements getQuestion_ImplAccess() {
		return (pQuestion_Impl != null) ? pQuestion_Impl : (pQuestion_Impl = new Question_ImplElements());
	}
	
	public ParserRule getQuestion_ImplRule() {
		return getQuestion_ImplAccess().getRule();
	}

	//Answer:
	//	"Answer" isFreeText?="freetext"? body=EString ("->" followup+=[Question|EString] (","
	//	followup+=[Question|EString])*)?;
	public AnswerElements getAnswerAccess() {
		return (pAnswer != null) ? pAnswer : (pAnswer = new AnswerElements());
	}
	
	public ParserRule getAnswerRule() {
		return getAnswerAccess().getRule();
	}

	//TableQuestion:
	//	"TableQuestion" name=EString isExclusive?="exclusive"? isOptional?="optional"? body=EString "(" "Items" "("
	//	items+=Item ("," items+=Item)* ")" answers+=Answer answers+=Answer* ")";
	public TableQuestionElements getTableQuestionAccess() {
		return (pTableQuestion != null) ? pTableQuestion : (pTableQuestion = new TableQuestionElements());
	}
	
	public ParserRule getTableQuestionRule() {
		return getTableQuestionAccess().getRule();
	}

	//Item:
	//	isFreeText?="freetext"? body=EString;
	public ItemElements getItemAccess() {
		return (pItem != null) ? pItem : (pItem = new ItemElements());
	}
	
	public ParserRule getItemRule() {
		return getItemAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
