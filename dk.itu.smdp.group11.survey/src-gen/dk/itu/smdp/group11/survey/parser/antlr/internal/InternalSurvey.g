/*
* generated by Xtext
*/
grammar InternalSurvey;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package dk.itu.smdp.group11.survey.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dk.itu.smdp.group11.survey.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dk.itu.smdp.group11.survey.services.SurveyGrammarAccess;

}

@parser::members {

 	private SurveyGrammarAccess grammarAccess;
 	
    public InternalSurveyParser(TokenStream input, SurveyGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Survey";	
   	}
   	
   	@Override
   	protected SurveyGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSurvey
entryRuleSurvey returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSurveyRule()); }
	 iv_ruleSurvey=ruleSurvey 
	 { $current=$iv_ruleSurvey.current; } 
	 EOF 
;

// Rule Survey
ruleSurvey returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Survey' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSurveyAccess().getSurveyKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='Intro' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSurveyAccess().getIntroKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getIntroEStringParserRuleCall_2_1_0()); 
	    }
		lv_intro_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		set(
       			$current, 
       			"intro",
        		lv_intro_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getQuestionsQuestionParserRuleCall_3_0()); 
	    }
		lv_questions_4_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_4_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getQuestionsQuestionParserRuleCall_4_0()); 
	    }
		lv_questions_5_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		add(
       			$current, 
       			"questions",
        		lv_questions_5_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_6='Outro' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSurveyAccess().getOutroKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyAccess().getOutroEStringParserRuleCall_5_1_0()); 
	    }
		lv_outro_7_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyRule());
	        }
       		set(
       			$current, 
       			"outro",
        		lv_outro_7_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	 iv_ruleQuestion=ruleQuestion 
	 { $current=$iv_ruleQuestion.current; } 
	 EOF 
;

// Rule Question
ruleQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getQuestion_ImplParserRuleCall_0()); 
    }
    this_Question_Impl_0=ruleQuestion_Impl
    { 
        $current = $this_Question_Impl_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuestionAccess().getTableQuestionParserRuleCall_1()); 
    }
    this_TableQuestion_1=ruleTableQuestion
    { 
        $current = $this_TableQuestion_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleQuestion_Impl
entryRuleQuestion_Impl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestion_ImplRule()); }
	 iv_ruleQuestion_Impl=ruleQuestion_Impl 
	 { $current=$iv_ruleQuestion_Impl.current; } 
	 EOF 
;

// Rule Question_Impl
ruleQuestion_Impl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Question' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQuestion_ImplAccess().getQuestionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestion_ImplAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestion_ImplRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isExclusive_2_0=	'exclusive' 
    {
        newLeafNode(lv_isExclusive_2_0, grammarAccess.getQuestion_ImplAccess().getIsExclusiveExclusiveKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestion_ImplRule());
	        }
       		setWithLastConsumed($current, "isExclusive", true, "exclusive");
	    }

)
)?(
(
		lv_isOptional_3_0=	'optional' 
    {
        newLeafNode(lv_isOptional_3_0, grammarAccess.getQuestion_ImplAccess().getIsOptionalOptionalKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestion_ImplRule());
	        }
       		setWithLastConsumed($current, "isOptional", true, "optional");
	    }

)
)?(
(
		lv_isFreeText_4_0=	'freetext' 
    {
        newLeafNode(lv_isFreeText_4_0, grammarAccess.getQuestion_ImplAccess().getIsFreeTextFreetextKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestion_ImplRule());
	        }
       		setWithLastConsumed($current, "isFreeText", true, "freetext");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestion_ImplAccess().getBodyEStringParserRuleCall_5_0()); 
	    }
		lv_body_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestion_ImplRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getQuestion_ImplAccess().getLeftParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestion_ImplAccess().getAnswersAnswerParserRuleCall_7_0()); 
	    }
		lv_answers_7_0=ruleAnswer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestion_ImplRule());
	        }
       		add(
       			$current, 
       			"answers",
        		lv_answers_7_0, 
        		"Answer");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestion_ImplAccess().getAnswersAnswerParserRuleCall_8_0()); 
	    }
		lv_answers_8_0=ruleAnswer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestion_ImplRule());
	        }
       		add(
       			$current, 
       			"answers",
        		lv_answers_8_0, 
        		"Answer");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getQuestion_ImplAccess().getRightParenthesisKeyword_9());
    }
)
;







// Entry rule entryRuleAnswer
entryRuleAnswer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnswerRule()); }
	 iv_ruleAnswer=ruleAnswer 
	 { $current=$iv_ruleAnswer.current; } 
	 EOF 
;

// Rule Answer
ruleAnswer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Answer' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnswerAccess().getAnswerKeyword_0());
    }
(
(
		lv_isFreeText_1_0=	'freetext' 
    {
        newLeafNode(lv_isFreeText_1_0, grammarAccess.getAnswerAccess().getIsFreeTextFreetextKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnswerRule());
	        }
       		setWithLastConsumed($current, "isFreeText", true, "freetext");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAnswerAccess().getBodyEStringParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnswerRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAnswerAccess().getHyphenMinusGreaterThanSignKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnswerRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAnswerAccess().getFollowupQuestionCrossReference_3_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAnswerAccess().getCommaKeyword_3_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnswerRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAnswerAccess().getFollowupQuestionCrossReference_3_2_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;







// Entry rule entryRuleTableQuestion
entryRuleTableQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTableQuestionRule()); }
	 iv_ruleTableQuestion=ruleTableQuestion 
	 { $current=$iv_ruleTableQuestion.current; } 
	 EOF 
;

// Rule TableQuestion
ruleTableQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TableQuestion' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTableQuestionAccess().getTableQuestionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableQuestionAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableQuestionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isExclusive_2_0=	'exclusive' 
    {
        newLeafNode(lv_isExclusive_2_0, grammarAccess.getTableQuestionAccess().getIsExclusiveExclusiveKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTableQuestionRule());
	        }
       		setWithLastConsumed($current, "isExclusive", true, "exclusive");
	    }

)
)?(
(
		lv_isOptional_3_0=	'optional' 
    {
        newLeafNode(lv_isOptional_3_0, grammarAccess.getTableQuestionAccess().getIsOptionalOptionalKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTableQuestionRule());
	        }
       		setWithLastConsumed($current, "isOptional", true, "optional");
	    }

)
)?(
(
		lv_isFreeText_4_0=	'freetext' 
    {
        newLeafNode(lv_isFreeText_4_0, grammarAccess.getTableQuestionAccess().getIsFreeTextFreetextKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTableQuestionRule());
	        }
       		setWithLastConsumed($current, "isFreeText", true, "freetext");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTableQuestionAccess().getBodyEStringParserRuleCall_5_0()); 
	    }
		lv_body_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableQuestionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTableQuestionAccess().getLeftParenthesisKeyword_6());
    }
	otherlv_7='items' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTableQuestionAccess().getItemsKeyword_7());
    }
	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTableQuestionAccess().getLeftParenthesisKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableQuestionAccess().getItemsItemParserRuleCall_9_0()); 
	    }
		lv_items_9_0=ruleItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableQuestionRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_9_0, 
        		"Item");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTableQuestionAccess().getCommaKeyword_10_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableQuestionAccess().getItemsItemParserRuleCall_10_1_0()); 
	    }
		lv_items_11_0=ruleItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableQuestionRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_11_0, 
        		"Item");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTableQuestionAccess().getRightParenthesisKeyword_11());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableQuestionAccess().getAnswersAnswerParserRuleCall_12_0()); 
	    }
		lv_answers_13_0=ruleAnswer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableQuestionRule());
	        }
       		add(
       			$current, 
       			"answers",
        		lv_answers_13_0, 
        		"Answer");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTableQuestionAccess().getAnswersAnswerParserRuleCall_13_0()); 
	    }
		lv_answers_14_0=ruleAnswer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableQuestionRule());
	        }
       		add(
       			$current, 
       			"answers",
        		lv_answers_14_0, 
        		"Answer");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_15=')' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTableQuestionAccess().getRightParenthesisKeyword_14());
    }
)
;





// Entry rule entryRuleItem
entryRuleItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemRule()); }
	 iv_ruleItem=ruleItem 
	 { $current=$iv_ruleItem.current; } 
	 EOF 
;

// Rule Item
ruleItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_isFreeText_0_0=	'freetext' 
    {
        newLeafNode(lv_isFreeText_0_0, grammarAccess.getItemAccess().getIsFreeTextFreetextKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemRule());
	        }
       		setWithLastConsumed($current, "isFreeText", true, "freetext");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getItemAccess().getBodyEStringParserRuleCall_1_0()); 
	    }
		lv_body_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


