/*
* generated by Xtext
*/
package dk.itu.smdp.group11.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SurveyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SurveyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Survey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSurveyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cIntroKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cIntroKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cIntroAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntroContentParserRuleCall_2_0 = (RuleCall)cIntroAssignment_2.eContents().get(0);
		private final Assignment cQuestionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuestionsQuestionParserRuleCall_3_0 = (RuleCall)cQuestionsAssignment_3.eContents().get(0);
		private final Assignment cQuestionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQuestionsQuestionParserRuleCall_4_0 = (RuleCall)cQuestionsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cOutroKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cOutroKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Assignment cOutroAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutroContentParserRuleCall_6_0 = (RuleCall)cOutroAssignment_6.eContents().get(0);
		
		//Survey: / * "<name>" * / "Survey" ("Intro" | "intro") intro=Content questions+=Question questions+=Question* ("Outro" |
		//	"outro") outro=Content;
		public ParserRule getRule() { return rule; }

		/// * "<name>" * / "Survey" ("Intro" | "intro") intro=Content questions+=Question questions+=Question* ("Outro" | "outro")
		//outro=Content
		public Group getGroup() { return cGroup; }

		/// * "<name>" * / "Survey"
		public Keyword getSurveyKeyword_0() { return cSurveyKeyword_0; }

		//"Intro" | "intro"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"Intro"
		public Keyword getIntroKeyword_1_0() { return cIntroKeyword_1_0; }

		//"intro"
		public Keyword getIntroKeyword_1_1() { return cIntroKeyword_1_1; }

		//intro=Content
		public Assignment getIntroAssignment_2() { return cIntroAssignment_2; }

		//Content
		public RuleCall getIntroContentParserRuleCall_2_0() { return cIntroContentParserRuleCall_2_0; }

		//questions+=Question
		public Assignment getQuestionsAssignment_3() { return cQuestionsAssignment_3; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_3_0() { return cQuestionsQuestionParserRuleCall_3_0; }

		//questions+=Question*
		public Assignment getQuestionsAssignment_4() { return cQuestionsAssignment_4; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_4_0() { return cQuestionsQuestionParserRuleCall_4_0; }

		//"Outro" | "outro"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"Outro"
		public Keyword getOutroKeyword_5_0() { return cOutroKeyword_5_0; }

		//"outro"
		public Keyword getOutroKeyword_5_1() { return cOutroKeyword_5_1; }

		//outro=Content
		public Assignment getOutroAssignment_6() { return cOutroAssignment_6; }

		//Content
		public RuleCall getOutroContentParserRuleCall_6_0() { return cOutroContentParserRuleCall_6_0; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsExclusiveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsExclusiveExKeyword_1_0 = (Keyword)cIsExclusiveAssignment_1.eContents().get(0);
		private final Assignment cIsOptionalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsOptionalOptKeyword_2_0 = (Keyword)cIsOptionalAssignment_2.eContents().get(0);
		private final Assignment cContentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContentContentParserRuleCall_3_0 = (RuleCall)cContentAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAnswersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnswersAnswerParserRuleCall_5_0 = (RuleCall)cAnswersAssignment_5.eContents().get(0);
		private final Assignment cAnswersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAnswersAnswerParserRuleCall_6_0 = (RuleCall)cAnswersAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Question:
		//	"Question" isExclusive?="ex"? isOptional?="opt"? content=Content "(" answers+=Answer answers+=Answer* ")";
		public ParserRule getRule() { return rule; }

		//"Question" isExclusive?="ex"? isOptional?="opt"? content=Content "(" answers+=Answer answers+=Answer* ")"
		public Group getGroup() { return cGroup; }

		//"Question"
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }

		//isExclusive?="ex"?
		public Assignment getIsExclusiveAssignment_1() { return cIsExclusiveAssignment_1; }

		//"ex"
		public Keyword getIsExclusiveExKeyword_1_0() { return cIsExclusiveExKeyword_1_0; }

		//isOptional?="opt"?
		public Assignment getIsOptionalAssignment_2() { return cIsOptionalAssignment_2; }

		//"opt"
		public Keyword getIsOptionalOptKeyword_2_0() { return cIsOptionalOptKeyword_2_0; }

		//content=Content
		public Assignment getContentAssignment_3() { return cContentAssignment_3; }

		//Content
		public RuleCall getContentContentParserRuleCall_3_0() { return cContentContentParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//answers+=Answer
		public Assignment getAnswersAssignment_5() { return cAnswersAssignment_5; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_5_0() { return cAnswersAnswerParserRuleCall_5_0; }

		//answers+=Answer*
		public Assignment getAnswersAssignment_6() { return cAnswersAssignment_6; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_6_0() { return cAnswersAnswerParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Content");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyEStringParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//Content:
		//	{Content} body=EString?;
		public ParserRule getRule() { return rule; }

		//{Content} body=EString?
		public Group getGroup() { return cGroup; }

		//{Content}
		public Action getContentAction_0() { return cContentAction_0; }

		//body=EString?
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//EString
		public RuleCall getBodyEStringParserRuleCall_1_0() { return cBodyEStringParserRuleCall_1_0; }
	}

	public class AnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Answer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnswerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIsFreeTextKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIsFreeTextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIsFreeTextEStringParserRuleCall_1_1_0 = (RuleCall)cIsFreeTextAssignment_1_1.eContents().get(0);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentContentParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFollowupAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFollowupQuestionParserRuleCall_3_1_0 = (RuleCall)cFollowupAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Answer:
		//	"Answer" ("isFreeText" isFreeText=EString)? content=Content ("(" followup=Question ")")?;
		public ParserRule getRule() { return rule; }

		//"Answer" ("isFreeText" isFreeText=EString)? content=Content ("(" followup=Question ")")?
		public Group getGroup() { return cGroup; }

		//"Answer"
		public Keyword getAnswerKeyword_0() { return cAnswerKeyword_0; }

		//("isFreeText" isFreeText=EString)?
		public Group getGroup_1() { return cGroup_1; }

		//"isFreeText"
		public Keyword getIsFreeTextKeyword_1_0() { return cIsFreeTextKeyword_1_0; }

		//isFreeText=EString
		public Assignment getIsFreeTextAssignment_1_1() { return cIsFreeTextAssignment_1_1; }

		//EString
		public RuleCall getIsFreeTextEStringParserRuleCall_1_1_0() { return cIsFreeTextEStringParserRuleCall_1_1_0; }

		//content=Content
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }

		//Content
		public RuleCall getContentContentParserRuleCall_2_0() { return cContentContentParserRuleCall_2_0; }

		//("(" followup=Question ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//followup=Question
		public Assignment getFollowupAssignment_3_1() { return cFollowupAssignment_3_1; }

		//Question
		public RuleCall getFollowupQuestionParserRuleCall_3_1_0() { return cFollowupQuestionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private SurveyElements pSurvey;
	private TerminalRule tWS;
	private QuestionElements pQuestion;
	private ContentElements pContent;
	private AnswerElements pAnswer;
	private EBooleanElements pEBoolean;
	private EStringElements pEString;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SurveyGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.itu.smdp.group11.Survey".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Survey: / * "<name>" * / "Survey" ("Intro" | "intro") intro=Content questions+=Question questions+=Question* ("Outro" |
	//	"outro") outro=Content;
	public SurveyElements getSurveyAccess() {
		return (pSurvey != null) ? pSurvey : (pSurvey = new SurveyElements());
	}
	
	public ParserRule getSurveyRule() {
		return getSurveyAccess().getRule();
	}

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//Question:
	//	"Question" isExclusive?="ex"? isOptional?="opt"? content=Content "(" answers+=Answer answers+=Answer* ")";
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//Content:
	//	{Content} body=EString?;
	public ContentElements getContentAccess() {
		return (pContent != null) ? pContent : (pContent = new ContentElements());
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}

	//Answer:
	//	"Answer" ("isFreeText" isFreeText=EString)? content=Content ("(" followup=Question ")")?;
	public AnswerElements getAnswerAccess() {
		return (pAnswer != null) ? pAnswer : (pAnswer = new AnswerElements());
	}
	
	public ParserRule getAnswerRule() {
		return getAnswerAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
