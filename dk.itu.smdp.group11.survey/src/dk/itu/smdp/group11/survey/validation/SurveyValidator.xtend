/*
 * generated by Xtext
 */
package dk.itu.smdp.group11.survey.validation

import group11survey.Answer
import group11survey.Group11surveyPackage
import group11survey.Question
import group11survey.Survey
import group11survey.TableQuestion
import java.util.List
import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class SurveyValidator extends AbstractSurveyValidator {

	@Check
	def checkSurveyHasQuestion(Survey survey) {
		if (survey.questions.size < 1) {
			error('Survey must have at least one question', Group11surveyPackage.Literals.SURVEY__QUESTIONS)
		}
	}
	
	@Check
	def checkQuestionBodyNotEmpty(Question question) {
		if (question.body == null || question.body.trim.length < 1) {
			error('Question can not be empty', Group11surveyPackage.Literals.CONTENT__BODY)
		}
	}
	
	@Check
	def checkQuestionHasName(Question question) {
		if (question.name == null || question.name.trim.length < 1) {
			error('Question ID can not be empty', Group11surveyPackage.Literals.QUESTION__NAME)
		}
	}
	
	List<String> list
	@Check
	def checkQuestionHasUniqueName(Question question) {		
		list = newArrayList()
		{(question.eContainer as Survey).questions}.forEach[list.add(name)]
		list.remove(question.name)
		if (list.contains(question.name)) {
			error('Question IDs must be unique', Group11surveyPackage.Literals.QUESTION__NAME, 1)
		}
	}

	@Check
	def checkQuestionFollowups(Answer answer) {
		if (!{answer.followup}.forall[name != (answer.eContainer as Question).name]) {
			error('Question can not contain itself in followup questions', Group11surveyPackage.Literals.ANSWER__FOLLOWUP)
		}
	}
	
	@Check 
	def checkExclusiveQuestionHasMultipleAnswers(Question question) {
		if (question.isExclusive && question.answers.size < 2) {
			error('Exclusive question must have at least two answers', Group11surveyPackage.Literals.QUESTION__IS_EXCLUSIVE)
		}
	}
	
	@Check
	def checkTableQuestionHasNoFollowups(Answer answer) {
		if ((answer.eContainer as Question) instanceof TableQuestion) {
			if (!(answer.followup.size == 0)) {
				error('Table question answers can not have followup questions', Group11surveyPackage.Literals.ANSWER__FOLLOWUP)
			}
		}
	}
	
	Survey survey
	Question currentQuestion
	@Check
	def checkNoCycles(Answer answer) {
		survey = (answer.eContainer as Question).eContainer as Survey
		currentQuestion = answer.eContainer as Question
		
		for (Answer currentQuestionAnswer : currentQuestion.answers) {
			for (Question currentAnswerFollowup : answer.followup) {
				for (Question nextQuestion : survey.questions) {
					if (currentAnswerFollowup.name.equals(nextQuestion.name)) {
						for (Answer nextQuestionAnswer : nextQuestion.answers) {
							if (nextQuestionAnswer.followup.contains(currentQuestion)) {
								error('Cycle detected', Group11surveyPackage.Literals.ANSWER__FOLLOWUP)
							}
						}
					}
				}
			}
		}
	}
}